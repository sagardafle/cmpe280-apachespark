import java.util.*;

import com.github.dvdme.ForecastIOLib.FIOCurrently;
import com.github.dvdme.ForecastIOLib.FIOHourly;
import com.github.dvdme.ForecastIOLib.ForecastIO;

import kafka.javaapi.producer.Producer;
import kafka.producer.KeyedMessage;
import kafka.producer.ProducerConfig;

public class KafkaProducer {
	public static void main(String[] args) {
		long events = Long.parseLong(args[0]);
		Random rnd = new Random();
		Properties props = new Properties();
		props.put("metadata.broker.list", "localhost:9092");
		props.put("producer.type", "sync");
		props.put("serializer.class", "kafka.serializer.StringEncoder");
		props.put("partitioner.class", "KafkaPartitioner");
		props.put("request.required.acks", "1");
		ProducerConfig config = new ProducerConfig(props);
		Producer<String, String> producer = new Producer<String, String>(config);
		for (long nEvents = 0; nEvents < events; nEvents++) {
			System.out.println("creating event " + nEvents);
			long runtime = new Date().getTime();
			String tempreture = "" + rnd.nextInt(9);
			String msg = runtime + " Current Tempreture is :" + tempreture;
			
			 ForecastIO fio = new ForecastIO("bac3f4678c5eefffb966cf2d767c2472");
			 /*
			 *fio.setUnits(ForecastIO.UNITS_SI); //sets the units as SI - optional
			fio.setExcludeURL("hourly,minutely"); //excluded the minutely and hourly reports from the reply
			fio.getForecast("38.7252993", "-9.1500364");
			System.out.println("Latitude: "+fio.getLatitude());
		    System.out.println("Longitude: "+fio.getLongitude());
		    System.out.println("Timezone: "+fio.getTimezone());
		    System.out.println("Temperature: "+fio.T());*/
			
			 FIOHourly hourly = new FIOHourly(fio);
			    //In case there is no hourly data available
			    if(hourly.hours()<0)
			        System.out.println("No hourly data.");
			    else
			        System.out.println("\nHourly:\n");
			    //Print hourly data
			    for(int i = 0; i<hourly.hours(); i++){
			        String [] h = hourly.getHour(i).getFieldsArray();
			        System.out.println("Hour #"+(i+1));
			        for(int j=0; j<h.length; j++)
			            System.out.println(h[j]+": "+hourly.getHour(i).getByKey(h[j]));
			        System.out.println("\n");
			    }
			 
			 
			    
			KeyedMessage<String, String> data = new KeyedMessage<String, String>("test", tempreture, msg);
			try {
			    Thread.sleep(1000);                 //3000 milliseconds is three second.
			} catch(InterruptedException ex) {
			    Thread.currentThread().interrupt();
			}
			producer.send(data);
		}
		producer.close();
	}
}